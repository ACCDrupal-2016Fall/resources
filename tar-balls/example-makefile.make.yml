# Example ACC makefile
# ----------------
# This is an example makefile to introduce new users of drush make to the
# syntax and options available to drush make.

# For a more complete example makefile, see drush example
#   https://github.com/drush-ops/drush/blob/master/examples/example.make.yml

# This make file is a working makefile - try it! Any line starting with a `#`
# is a comment.

# Core version
# ------------
# Each makefile should begin by declaring the core version of Drupal that all
# projects should be compatible with.

core: 7.x

# API version
# ------------
# Every makefile needs to declare it's Drush Make API version. This version of
# drush make uses API version `2`.

api: 2

# Core project
# ------------
# In order for your makefile to generate a full Drupal site, you must include
# a core project. This is usually Drupal core, but you can also specify
# alternative core projects like Pressflow. Note that makefiles included with
# install profiles *should not* include a core project.

# Use Pressflow instead of Drupal core:
# projects:
#   pressflow:
#     type: "core"
#     download:
#       type: "file"
#       url: "http://launchpad.net/pressflow/6.x/6.15.73/+download/pressflow-6.15.73.tar.gz"
#
# Git clone of Drupal 7.x. Requires the `core` property to be set to 7.x.
# projects
#   drupal:
#     type: "core"
#     download:
#       url: "http://git.drupal.org/project/drupal.git"

projects:
  # Drupal Version
  drupal:
    version: 7.51

  # With the exception of Drupal, all modules/themes/libraries generate in
  # sites/all/* by default.
  # Base Modules
  views:
    type: module
    version: ~
  admin_menu:
    type: module
    version: ~
  calendar:
    type: module
    version: ~
  ctools:
    type: module
    version: 1.3
  # Modules
  cck_signup:
    type: module
    download:
      revision: 2fe932c
      branch: 7.x-1.x
  data:
    type: module
    download:
      type: git # Note, 'git' is the default, no need to specify.
      url: "http://git.drupal.org/project/views.git"
      revision: 7.x-3.x
  date:
    type: module
    version: ~
  devel:
    type: module
    version: ~
  link:
    type: module
    version: ~
  masquerade:
    type: module
    version: ~
  module_filter:
    type: module
    version: ~
  xray:
    type: module
    version: ~
  # Custom Modules
    # Custom location < Example 1 >
    # This method not recommended simply because it is so EASY to upload files
    # to a git repository such as GitHub of BitBucket. If you have custom Code,
    # whether modules, themes, libraries, or simple configurations, that Code
    # should be managed through Version Control.
  firstmodule:
    type: module
    subdir: custom
    version: ~
    download:
      type: file
      url: "file:///c/Users/Charles/dev_solo/tarballs/firstmodule.tar"
  # Themes
  adaptivetheme:
    type: theme
  andromeda:
    type: theme
  bamboo:
    type: theme
  busy:
    type: theme
  corolla:
    type: theme
  zen:
    type: theme

  # Custom Themes
    # Custom Location < Example 2 >
    # This method is much cleaner, but relies heavily on maintaining an active
    # Internet connection with a relatively positive download speed to maintain.
    #
  supermegastore:
    type: theme
    subdir: custom
    version: ~
    download:
      type: file
      url: "https://github.com/ACCDrupal-2016Fall/resources/blob/7.x-0.x/tar-balls/supermegastore.tar"

# If all projects or libraries share common attributes, the `defaults`
# array can be used to specify these globally, rather than
# per-project.

#  libraries:
#    jquery_ui:
#      destination: libraries

defaults:
  projects:
    subdir: contrib
